CREATE PROCEDURE [dbo].[spBrands]
    @id INT = NULL,
    @Title NVARCHAR(50) = NULL,
    @Icon NVARCHAR(15) = NULL,
    @Shortname NVARCHAR(50) = NULL,
    @TotalProductsCount INT = 0,
    @StatementType VARCHAR(100) = '',
    @Take INT = NULL,
    @newId INT = NULL OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    -- Parameter validation for operations that require an ID
    IF @StatementType IN ('GetTotalProductsCount', 'GetById', 'UpdateProductsCount', 'Update', 'Delete') AND @id IS NULL
    BEGIN
        RAISERROR('ID is required for this operation', 16, 1);
        RETURN;  -- No transaction is started here, so no need to rollback
    END

    -- Handle different StatementType cases
    IF @StatementType = 'Create'
    BEGIN 
        BEGIN TRANSACTION;
        BEGIN TRY
            INSERT INTO Brands (Title, Icon, Shortname, TotalProductsCount)
            VALUES (@Title, @Icon, @Shortname, @TotalProductsCount);

            SET @newId = SCOPE_IDENTITY(); 
            COMMIT TRANSACTION;
            RETURN @newId;
        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION;
            THROW;  -- Re-throw the caught exception
        END CATCH
    END

    ELSE IF @StatementType = 'GetAll'
    BEGIN
        -- Specify column names instead of using SELECT *
        SELECT Id, Title, Icon, Shortname, TotalProductsCount FROM Brands;
        RETURN;
    END

ELSE IF @StatementType = 'GetUsedBrandWithSeriesAndSubBrands'
BEGIN
    -- First result set: Brands
    SELECT 
        c.Id,
        c.Title,
        c.Icon,
        c.ShortName,
        c.TotalProductsCount
    FROM 
        Brands c
    WHERE 
        c.TotalProductsCount > 0;

    -- Second result set: Series
    SELECT 
        s.Id,
        s.Title,
        s.Icon,
        s.ShortName,
        s.ProductsCount,
        s.BrandShortName
    FROM 
        Series s
    WHERE 
        s.ProductsCount > 0;

    -- Third result set: SubBrands
    SELECT 
        sc.Id,
        sc.Title,
        sc.Icon,
        sc.ShortName,
        sc.ProductsCount,
        sc.BrandShortName,
        sc.SeriesShortName
    FROM 
        SubBrands sc
    WHERE 
        sc.ProductsCount > 0;
END



    ELSE IF @StatementType = 'GetUsedBrands'
    BEGIN
        SELECT Id, Title, Icon, Shortname, TotalProductsCount 
        FROM Brands
        WHERE TotalProductsCount > 0;
        RETURN;
    END

    ELSE IF @StatementType = 'GetById'
    BEGIN
        SELECT Id, Title, Icon, Shortname, TotalProductsCount 
        FROM Brands 
        WHERE Id = @Id;
        RETURN;
    END

    ELSE IF @StatementType = 'GetTotalProductsCount'
    BEGIN
        SELECT TotalProductsCount 
        FROM Brands 
        WHERE Id = @id;
        RETURN;
    END

    ELSE IF @StatementType = 'UpdateProductsCount'
    BEGIN
        BEGIN TRANSACTION;
        BEGIN TRY
            UPDATE Brands 
            SET TotalProductsCount = @TotalProductsCount
            WHERE Id = @id;
            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION;
            THROW;
        END CATCH
        RETURN;
    END

    ELSE IF @StatementType = 'Update'
    BEGIN
        BEGIN TRANSACTION;
        BEGIN TRY
            UPDATE Brands 
            SET Title = @Title, Shortname = @Shortname, Icon = @Icon 
            WHERE Id = @id;
            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION;
            THROW;
        END CATCH
        RETURN;
    END

    ELSE IF @StatementType = 'Delete'
    BEGIN
        BEGIN TRANSACTION;
        BEGIN TRY
            DELETE FROM Brands 
            WHERE Id = @id;
            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION;
            THROW;
        END CATCH
        RETURN;
    END

    ELSE IF @StatementType = 'Truncate'
    BEGIN
        BEGIN TRANSACTION;
        BEGIN TRY
            TRUNCATE TABLE Brands;
            COMMIT TRANSACTION;
        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION;
            THROW;
        END CATCH
        RETURN;
    END

    -- Unsupported StatementType handling
    ELSE
    BEGIN
        RAISERROR('Unsupported StatementType', 16, 1);
        RETURN;
    END
END
